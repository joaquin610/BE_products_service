name: Java CI/CD with Maven

on:
  push:
    branches: [ "main", "develop", "testing" ]
  pull_request:
    branches: [ "main", "develop", "testing" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run tests
        run: mvn test

  sonarcloud:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache SonarCloud packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: |
            ${{ runner.os }}-sonar

      - name: Install dependencies
        run: |
          # Command to install your dependencies, e.g. npm install, mvn install, etc.
          mvn install

      - name: Conditional SonarCloud analysis
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify sonar:sonar \
          -Dsonar.projectKey=joaquin610_BE_products_service \
          -Dsonar.organization=joaquin610 \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Get SonarCloud project URL
        id: sonar-url
        run: echo "::set-output name=url::https://sonarcloud.io/dashboard?id=joaquin610_BE_products_service"

      - name: Add comment to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GI_TOKEN }}
          script: |
            const sonarUrl = '${{ steps.sonar-url.outputs.url }}';
            const pullRequestNumber = context.payload.pull_request.number;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullRequestNumber,
              body: `SonarCloud analysis complete. [View report](${sonarUrl})`
            }).catch((error) => {
              console.log(error);
              process.exit(1);
            });
  
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install Newman
        run: npm install -g newman

      - name: Run Postman Tests
        run: ./run_tests.sh

      - name: Archive HTML Report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: newman-html-report
          path: newman-report.html
  cd:
    runs-on: ubuntu-latest
    needs: sonarcloud
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"

      - name: Log in to Amazon ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build and push Docker image
        env:
          ECR_REPOSITORY: products-service-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Register new task definition
        id: register-task
        env:
          ECR_REPOSITORY: products-service-repo
          IMAGE_TAG: ${{ github.sha }}
          EXECUTION_ROLE_ARN: ${{ secrets.ECS_EXECUTION_ROLE_ARN }}
        run: |
          TASK_DEF=$(cat <<EOF
          {
            "family": "products-service",
            "networkMode": "awsvpc",
            "executionRoleArn": "$EXECUTION_ROLE_ARN",
            "containerDefinitions": [
              {
                "name": "app",
                "image": "${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:$IMAGE_TAG",
                "essential": true,
                "memory": 512,
                "cpu": 256,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "hostPort": 80
                  }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF
          )
          echo "$TASK_DEF" > taskdef.json
          aws ecs register-task-definition --cli-input-json file://taskdef.json

      - name: Update ECS service with new image
        env:
          CLUSTER_NAME: main-ecs-cluster
          SERVICE_NAME: BE_Products_Service
          CONTAINER_NAME: app
        run: |
          TASK_FAMILY="products-service"
          REVISION=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY | jq .taskDefinition.revision)

